package ru.tsystems.ecare.persistence.entities;

import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;
import javax.validation.constraints.Digits;

/**
 * Contract generated by hbm2java.
 */
@NamedQueries({
    @NamedQuery(
            name = "maximumNumber",
            query = "select max(number) from Contract"
    ),
    @NamedQuery(
            name = "findContractByNumber",
            query = "from Contract c where c.number = :contractNumber"
    )
})
@Entity
@Table(name = "contract", catalog = "ECareDB")
public class Contract implements java.io.Serializable {

    /**
     *
     */
    private static final long serialVersionUID = -2015087676939118163L;
    private Integer number;
    private Customer customer;
    private Role lockedBy;
    private Tariff tariff;
    private Set<Option> options = new HashSet<>(0);

    public Contract() {
    }

    public Contract(Customer customer, Tariff tariff) {
        this.customer = customer;
        this.tariff = tariff;
    }

    public Contract(Customer customer, Role role, Tariff tariff,
            Set<Option> options) {
        this.customer = customer;
        this.lockedBy = role;
        this.tariff = tariff;
        this.options = options;
    }

    @Digits(integer = 10, fraction = 0)
    @Id
    @Column(name = "number", unique = true, nullable = false)
    public Integer getNumber() {
        return this.number;
    }

    public void setNumber(Integer number) {
        this.number = number;
    }

    @ManyToOne
    @JoinColumn(name = "customer_id", nullable = false)
    public Customer getCustomer() {
        return this.customer;
    }

    public void setCustomer(Customer customer) {
        this.customer = customer;
    }

    @ManyToOne
    @JoinColumn(name = "locked_by")
    public Role getLockedBy() {
        return this.lockedBy;
    }

    public void setLockedBy(Role lockedBy) {
        this.lockedBy = lockedBy;
    }

    @ManyToOne
    @JoinColumn(name = "tariff_id", nullable = false)
    public Tariff getTariff() {
        return this.tariff;
    }

    public void setTariff(Tariff tariff) {
        this.tariff = tariff;
    }

    @ManyToMany(fetch = FetchType.EAGER)
    @JoinTable(name = "contract_option", catalog = "ECareDB", joinColumns = {
        @JoinColumn(name = "contract_number",
                nullable = false, updatable = false)},
            inverseJoinColumns = {
                @JoinColumn(name = "option_id",
                        nullable = false, updatable = false)})
    public Set<Option> getOptions() {
        return this.options;
    }

    public void setOptions(Set<Option> options) {
        this.options = options;
    }

}
