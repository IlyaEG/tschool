package ru.tsystems.ecare.persistence.entities;
// default package
// Generated 13.10.2014 11:45:52 by Hibernate Tools 4.3.1

import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

/**
 * Option generated by hbm2java
 */
@Entity
@Table(name = "Option", catalog = "ECareDB", uniqueConstraints = @UniqueConstraint(columnNames = "OptionName"))
public class Option implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 3534135077107317115L;
	private Integer id;
	private String optionName;
	private float rate;
	private Set<Option> optionsForId = new HashSet<Option>(0);
	private Set<Option> optionsForIncompatibleId = new HashSet<Option>(0);
	private Set<Tariff> tariffs = new HashSet<Tariff>(0);
	private Set<Option> optionsForRelatedId = new HashSet<Option>(0);
	private Set<Option> optionsForId_1 = new HashSet<Option>(0);
	private Set<Contract> contracts = new HashSet<Contract>(0);

	public Option() {
	}

	public Option(String optionName, float rate) {
		this.optionName = optionName;
		this.rate = rate;
	}

	public Option(String optionName, float rate, Set<Option> optionsForId,
			Set<Option> optionsForIncompatibleId, Set<Tariff> tariffs,
			Set<Option> optionsForRelatedId, Set<Option> optionsForId_1,
			Set<Contract> contracts) {
		this.optionName = optionName;
		this.rate = rate;
		this.optionsForId = optionsForId;
		this.optionsForIncompatibleId = optionsForIncompatibleId;
		this.tariffs = tariffs;
		this.optionsForRelatedId = optionsForRelatedId;
		this.optionsForId_1 = optionsForId_1;
		this.contracts = contracts;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@Column(name = "OptionName", unique = true, nullable = false, length = 100)
	public String getOptionName() {
		return this.optionName;
	}

	public void setOptionName(String optionName) {
		this.optionName = optionName;
	}

	@Column(name = "Rate", nullable = false, precision = 12, scale = 0)
	public float getRate() {
		return this.rate;
	}

	public void setRate(float rate) {
		this.rate = rate;
	}

//	@ManyToMany(fetch = FetchType.LAZY, mappedBy = "optionsForRelatedId")
//	public Set<Option> getOptionsForId() {
//		return this.optionsForId;
//	}

	public void setOptionsForId(Set<Option> optionsForId) {
		this.optionsForId = optionsForId;
	}

//	@ManyToMany(fetch = FetchType.LAZY, mappedBy = "optionsForId")
//	public Set<Option> getOptionsForIncompatibleId() {
//		return this.optionsForIncompatibleId;
//	}

	public void setOptionsForIncompatibleId(Set<Option> optionsForIncompatibleId) {
		this.optionsForIncompatibleId = optionsForIncompatibleId;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "TariffOption", catalog = "ECareDB", joinColumns = { @JoinColumn(name = "OptionId", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "TariffId", nullable = false, updatable = false) })
	public Set<Tariff> getTariffs() {
		return this.tariffs;
	}

	public void setTariffs(Set<Tariff> tariffs) {
		this.tariffs = tariffs;
	}

//	@ManyToMany(fetch = FetchType.LAZY, mappedBy = "optionsForId")
//	public Set<Option> getOptionsForRelatedId() {
//		return this.optionsForRelatedId;
//	}

	public void setOptionsForRelatedId(Set<Option> optionsForRelatedId) {
		this.optionsForRelatedId = optionsForRelatedId;
	}

//	@ManyToMany(fetch = FetchType.LAZY, mappedBy = "optionsForIncompatibleId")
//	public Set<Option> getOptionsForId_1() {
//		return this.optionsForId_1;
//	}

	public void setOptionsForId_1(Set<Option> optionsForId_1) {
		this.optionsForId_1 = optionsForId_1;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "ContractOption", catalog = "ECareDB", joinColumns = { @JoinColumn(name = "OptionId", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "ContractNumber", nullable = false, updatable = false) })
	public Set<Contract> getContracts() {
		return this.contracts;
	}

	public void setContracts(Set<Contract> contracts) {
		this.contracts = contracts;
	}

}
